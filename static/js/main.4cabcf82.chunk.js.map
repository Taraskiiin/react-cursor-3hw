{"version":3,"sources":["Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","id","useRef","useState","time","speed","startbtn","start","timer","setTimer","useEffect","current","setInterval","TimerUpdate","clearInterval","console","log","Newtime","onTick","restartNewTimer","outTime","alert","className","percent","strokeWidth","strokeColor","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAKe,SAASA,EAAMC,GAC5B,IAAMC,EAAKC,mBADwB,EAETC,mBAAS,CACjCC,KAAMJ,EAAMI,KACZC,MAAOL,EAAMK,MACbC,SAAUN,EAAMO,QALiB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAOnCC,qBAAU,WAOR,OANIF,EAAMF,WAAaL,EAAGU,QACxBV,EAAGU,QAAUC,aAAY,kBAAMC,MAAeb,EAAMK,QAC3CJ,EAAGU,SAAYH,EAAMF,WAC9BQ,cAAcb,EAAGU,SACjBV,EAAGU,QAAU,MAER,WACLG,cAAcb,EAAGU,SACjBV,EAAGU,QAAU,QAEd,CAACH,EAAMJ,KAAMI,EAAMF,WAEtB,IAAMO,EAAc,WAElB,GADAE,QAAQC,IAAIR,EAAMJ,MACdI,EAAMJ,KAAO,EAAG,CAClB,IAAIa,EAAUT,EAAMJ,KAAO,EAC3BW,QAAQC,IAAIC,GACZR,EAAS,eACJD,EADG,CAENJ,KAAMa,KAERC,EAAOV,EAAMJ,MACbW,QAAQC,IAAI,aAEZG,KAGED,EAAS,SAACd,GACd,OAAOW,QAAQC,IAAR,8BAAmCZ,EAAnC,UAKHe,EAAkB,WAEJ,IADFX,EAAMJ,MAEpBgB,KAGEA,EAAU,WACK,IAAfZ,EAAMJ,OACRiB,MAAM,eACNZ,EAAS,eACJD,EADG,CAENJ,KAAMJ,EAAMI,KACZE,SAAUN,EAAMM,cAItB,OACE,yBAAKgB,UAAU,SACZd,EAAMJ,KACP,yBAAKkB,UAAU,mBACb,kBAAC,IAAD,CACEC,QAAsB,GAAbf,EAAMJ,KACfoB,YAAY,IACZC,YAAY,YAEd,4BAAQH,UAAU,WAAWI,QAAS,WA3B1CjB,EAAS,eAAKD,EAAN,CAAaF,UAAWE,EAAMF,cA2BlC,gBC5DOqB,MARf,WACI,OAAO,yBAAKL,UAAU,OACpB,kBAAC,EAAD,CACAlB,KAAM,GACNC,MAAQ,IACRE,OAAQ,MCIMqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.4cabcf82.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"../App.js\";\nimport { Circle } from \"rc-progress\";\nimport \"./Timer.css\";\n\nexport default function Timer(props) {\n  const id = useRef();\n  const [timer, setTimer] = useState({\n    time: props.time,\n    speed: props.speed,\n    startbtn: props.start,\n  });\n  useEffect(() => {\n    if (timer.startbtn && !id.current) {\n      id.current = setInterval(() => TimerUpdate(), props.speed);\n    } else if (id.current || !timer.startbtn) {\n      clearInterval(id.current);\n      id.current = null;\n    }\n    return () => {\n      clearInterval(id.current);\n      id.current = null;\n    };\n  }, [timer.time, timer.startbtn] );\n\n  const TimerUpdate = () => {\n    console.log(timer.time);\n    if (timer.time > 0) {\n      let Newtime = timer.time - 1;\n      console.log(Newtime);\n      setTimer({\n        ...timer,\n        time: Newtime,\n      });\n      onTick(timer.time);\n      console.log(\"1234\");\n    } else {\n      restartNewTimer();\n    }\n  };\n  const onTick = (time) => {\n    return console.log(`BIGBOOOOOOOOOOM on: ${time} sec`);\n  };\n  const btnPlay = () => {\n    setTimer({ ...timer, startbtn: !timer.startbtn });\n  };\n  const restartNewTimer = () => {\n    let lastValue = timer.time;\n    if (lastValue === 0) {\n      outTime();\n    }\n  };\n  const outTime = () => {\n    if (timer.time === 0) {\n      alert(`Time is out`);\n      setTimer({\n        ...timer,\n        time: props.time,\n        startbtn: props.startbtn,\n      });\n    }\n  };\n  return (\n    <div className=\"Timer\">\n      {timer.time}\n      <div className=\"Circle__process\">\n        <Circle\n          percent={timer.time * 10}\n          strokeWidth=\"2\"\n          strokeColor=\"#03e9f4\"\n        />\n        <button className=\"startbtn\" onClick={() => btnPlay()}>\n          PLAY/PAUSE\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Timer from \"./Timer/Timer.js\";\n\nfunction App(){\n    return <div className=\"App\">\n      <Timer\n      time={10}\n      speed= {1000}\n      start= {false}/>\n    </div>;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}